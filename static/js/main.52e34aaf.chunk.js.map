{"version":3,"sources":["MiniMap.js","UI.js","Modal.js","TerrainGen.js","Scene.js","Castle.js","Movement.js","Army.js","Player.js","GameScene.js","Map.js","Game.js","App.js","index.js"],"names":["CONFIG","UI","key","active","game","this","scene","get","mapWidth","mapHeight","width","height","margin","name","background","zoom","center","x","y","positon","cameras","add","setZoom","setName","centerOn","setBackgroundColor","MiniMap","terrainLayer","player","players","title","text","turn","fill","setInteractive","on","target","movement","clear","endTurn","setText","setClickCursor","setDefaultCursor","Scene","style","align","Modal","load","setBaseURL","process","image","data","castle","armies","newArmy","sprite","main","centerX","centerY","charAt","toUpperCase","slice","setOrigin","exit","stop","isEmpty","addArmy","resume","drawArmyList","drawNewArmyList","isEqual","previousNewArmy","newArmyList","forEach","item","destroy","newLabelList","index","map","amount","type","armyList","labelList","buttonList","removeArmy","TERRAIN_ID","FOREST_ID","SAND_ID","CASTLE_ID","MOUNTAIN_ID","WATER_ID","Input","Keyboard","KeyCodes","Q","E","SmoothedKeyControl","Cameras","Controls","input","keyboard","createCursorKeys","left","right","config","up","down","camera","zoomIn","addKey","zoomOut","drag","maxSpeed","acceleration","controls","setBounds","setScroll","mapControls","pathFinder","finder","entityMover","minimapCamera","minimap","terrain","PhaserScene","Castle","tileWidth","tileHeight","setOwner","owner","clearOwner","previousAmount","names","size","trigger","zone","setSize","physics","world","enable","body","setAllowGravity","moves","setOpenCursor","events","emit","warrior","INITIAL_STATE","path","cost","totalCost","currentTurn","nextTurns","indicators","nextIndicators","costMatrix","graphics","state","worldX","value","worldY","createPathPoint","circle","Geom","Circle","fillCircleShape","onComplete","stopFollow","move","length","tweens","targets","duration","startFollow","timeline","spendMovement","doMove","nextState","reduce","tileCost","movementPoints","pathReducer","fillStyle","Army","resetMovement","update","embedded","touching","none","wasTouching","setDisplaySize","setDisplayOrigin","onCastle","debugBodyColor","alert","castles","overlap","money","id","army","worldToTile","Math","floor","cursor","GameScene","onPointerDown","pointer","rightButtonDown","to","from","onPathCalculated","findPath","calculate","error","console","playerId","newPlayer","Player","push","mouse","disableContextMenu","spawnPoint","make","tilemap","tileset","addTilesetImage","createBlankDynamicLayer","objectLayer","EasyStar","js","setGrid","setAcceptableTiles","enableDiagonals","setCost","tile","setTileCost","row","includes","putTileAt","convertLayerToStatic","setTileIndexCallback","log","Map","seed","random","noise","Noise","min","max","bellow0","above0","matrix","range","perlin2","waterLevel","sandLevel","isSand","level","isWater","isTerrain","sandTile","sample","topLeft","progress","top","topRight","bottomLeft","bottom","bottomRight","tileType","tileTypeFactory","normalized","fitsCastle","possiblePositions","flatMap","filter","distance","a","b","abs","placeCastle","outsideRadious","points","point","radious","every","existingPoint","findCastlePosition","outside","placeCastles","r","generator","spawn","addPlayer","setupCamera","Movement","createMapControls","run","pause","time","delta","PhaserMath","Clamp","selectedTarget","default","arcade","debug","gravity","Phaser","AUTO","parent","pixelArt","Game","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52e34aaf.chunk.js","sourcesContent":["const CONFIG = {\n  width: 102,\n  height: 102,\n  margin: 10,\n  padding: 2,\n  background: 0x002244,\n  name: \"minimap\"\n};\n\nexport default (scene, mapWidth, mapHeight) => {\n  const { width, height, margin, padding, name, background } = CONFIG;\n\n  const zoom = (height - padding) / mapHeight;\n  const center = { x: mapWidth / 2, y: mapHeight / 2 };\n  const positon = { x: scene.width - width - margin, y: margin };\n\n  return scene.cameras\n    .add(positon.x, positon.y, width, height)\n    .setZoom(zoom)\n    .setName(name)\n    .centerOn(center.x, center.y)\n    .setBackgroundColor(background);\n};\n","import { Scene } from \"phaser\";\n\nimport MiniMap from \"./MiniMap\";\n\nexport default class UI extends Scene {\n  constructor() {\n    super({ key: \"UI\", active: false });\n  }\n\n  create() {\n    const game = this.scene.get(\"GameScene\");\n    MiniMap(game, game.terrainLayer.width, game.terrainLayer.height);\n\n    const player = game.players[0];\n\n    const title = this.add.text(\n      20,\n      20,\n      `Current Player: ${player.name()}, turn: ${player.turn()}`,\n      { fill: \"#000000\" }\n    );\n\n    const button = this.add\n      .text(700, 560, `End Turn`, { fill: \"#000000\" })\n      .setInteractive()\n      .on(\"pointerdown\", () => {\n        game.target = null;\n        game.movement.clear();\n        player.endTurn();\n        title.setText(\n          `Current Player: ${player.name()}, turn: ${player.turn()}`\n        );\n      })\n      .on(\"pointerover\", () => game.setClickCursor())\n      .on(\"pointerout\", () => game.setDefaultCursor());\n  }\n}\n","import { map, isEqual, isEmpty } from \"lodash\";\nimport { Scene } from \"phaser\";\n\nconst style = { fill: \"#000000\", align: \"center\" };\n\nexport default class Modal extends Scene {\n  constructor() {\n    super({ key: \"Modal\", active: false });\n  }\n\n  preload() {\n    this.load.setBaseURL(`${process.env.PUBLIC_URL}`);\n    this.load.image(\"modal\", \"modal_bg.png\");\n  }\n\n  create(data) {\n    const { name } = data.castle;\n    this.game = this.scene.get(\"GameScene\");\n    this.castle = data.castle;\n    this.player = data.player;\n    this.armies = [];\n    this.newArmy = {};\n\n    this.add.sprite(\n      this.cameras.main.centerX,\n      this.cameras.main.centerY,\n      \"modal\"\n    );\n\n    this.title = this.add\n      .text(\n        this.cameras.main.centerX,\n        100,\n        name.charAt(0).toUpperCase() + name.slice(1),\n        style\n      )\n      .setOrigin(0.5, 0.5);\n\n    this.add.text(90, 140, \"Garrison\", style);\n\n    this.add.text(630, 140, \"New army\", style);\n\n    this.exit = this.add\n      .text(660, 490, \"Close\", style)\n      .setInteractive()\n      .on(\"pointerdown\", () => {\n        this.scene.stop();\n        this.game.setDefaultCursor();\n        if (!isEmpty(this.newArmy))\n          this.player.addArmy(\n            this.castle.positon.x,\n            this.castle.positon.y,\n            \"warrior\"\n          );\n        this.game.scene.resume();\n      });\n  }\n\n  update() {\n    this.drawArmyList();\n    this.drawNewArmyList();\n  }\n\n  drawNewArmyList() {\n    if (isEqual(this.newArmy, this.previousNewArmy)) return;\n    if (this.newArmyList) this.newArmyList.forEach(item => item.destroy());\n    if (this.newLabelList) this.newLabelList.forEach(item => item.destroy());\n\n    let index = 1;\n    this.newArmyList = map(this.newArmy, (amount, type) => {\n      const x = 630;\n      const y = 160 + index * 20;\n      index++;\n      return this.add.sprite(x, y, type);\n    });\n\n    index = 1;\n    this.newLabelList = map(this.newArmy, amount => {\n      const x = 650;\n      const y = 155 + index * 20;\n      index++;\n      return this.add.text(x, y, `x${amount}`, style);\n    });\n\n    this.previousNewArmy = this.newArmy;\n  }\n\n  drawArmyList() {\n    if (isEqual(this.armies, this.castle.armies)) return;\n    if (this.armyList) this.armyList.forEach(item => item.destroy());\n    if (this.labelList) this.labelList.forEach(item => item.destroy());\n    if (this.buttonList) this.buttonList.forEach(item => item.destroy());\n\n    let index = 1;\n    this.armyList = map(this.castle.armies, (amount, type) => {\n      const x = 100;\n      const y = 160 + index * 20;\n      index++;\n      return this.add.sprite(x, y, type);\n    });\n\n    index = 1;\n    this.labelList = map(this.castle.armies, amount => {\n      const x = 120;\n      const y = 155 + index * 20;\n      index++;\n      return this.add.text(x, y, `x${amount}`, style);\n    });\n\n    index = 1;\n    this.buttonList = map(this.castle.armies, (amount, type) => {\n      const x = 200;\n      const y = 155 + index * 20;\n      index++;\n      return this.add\n        .text(x, y, `---->`, style)\n        .setInteractive()\n        .on(\"pointerdown\", () => {\n          if (amount <= 0) return;\n          this.castle.removeArmy(type, 1);\n          this.newArmy = {\n            ...this.newArmy,\n            [type]: (this.newArmy[type] || 0) + 1\n          };\n        });\n    });\n\n    this.armies = this.castle.armies;\n  }\n}\n","import { Noise } from \"noisejs\";\nimport {\n  findLast,\n  range,\n  sample,\n  sortBy,\n  includes,\n  every,\n  filter\n} from \"lodash\";\nimport { progress } from \"@popmotion/popcorn\";\n\nexport const TERRAIN_ID = [2];\nexport const FOREST_ID = [4, 5, 6];\nexport const SAND_ID = [8, 9, 10, 11, 12, 13, 14, 15];\nexport const CASTLE_ID = [16, 17, 24, 25];\nexport const MOUNTAIN_ID = [1];\nexport const WATER_ID = [3, 7];\n\nconst ZOOM_FACTOR = 12;\n\nexport default (width, height, seed = Math.random()) => {\n  const noise = new Noise();\n  noise.seed(seed);\n  const zoom = (width * ZOOM_FACTOR) / 100;\n\n  let min = 0;\n  let max = 0;\n  let bellow0 = 0;\n  let above0 = 0;\n\n  const matrix = range(height).map(y => {\n    return range(width).map(x => {\n      const value = noise.perlin2(x / zoom, y / zoom);\n\n      min = value < min ? value : min;\n      max = value > max ? value : max;\n\n      if (value < 0) bellow0++;\n      else above0++;\n\n      return value;\n    });\n  });\n\n  // let islands = [];\n\n  // const border = 0.2;\n  const waterLevel = 0.45;\n  const sandLevel = waterLevel + 0.1;\n\n  // const isAdjacent = (x, y) => island =>\n  //   (x + 1 === island.x || x - 1 === island.x || x === island.x) &&\n  //   (y + 1 === island.y || y - 1 === island.y || y === island.y);\n\n  const isSand = level => level >= waterLevel && level < sandLevel;\n  const isWater = level => level < waterLevel;\n  const isTerrain = level => !isSand(level) && !isWater(level);\n\n  const sandTile = (matrix, x, y) => {\n    if (y - 1 < 0 || y + 1 >= matrix.length) return sample(WATER_ID);\n    if (x - 1 < 0 || x + 1 >= matrix.length) return sample(WATER_ID);\n\n    const topLeft = progress(min, max, matrix[y - 1][x - 1]);\n    const top = progress(min, max, matrix[y - 1][x]);\n    const topRight = progress(min, max, matrix[y - 1][x + 1]);\n    const left = progress(min, max, matrix[y][x - 1]);\n    const right = progress(min, max, matrix[y][x + 1]);\n    const bottomLeft = progress(min, max, matrix[y + 1][x - 1]);\n    const bottom = progress(min, max, matrix[y + 1][x]);\n    const bottomRight = progress(min, max, matrix[y + 1][x + 1]);\n\n    if (\n      !isTerrain(top) &&\n      !isTerrain(left) &&\n      !isTerrain(right) &&\n      !isTerrain(bottom)\n    )\n      return sample(WATER_ID);\n\n    if (isTerrain(bottom) && isTerrain(right)) return SAND_ID[7];\n    if (isTerrain(top) && isTerrain(right)) return SAND_ID[2];\n    if (isTerrain(bottom) && isTerrain(left)) return SAND_ID[5];\n    if (isTerrain(top) && isTerrain(left)) return SAND_ID[0];\n\n    if (isTerrain(top)) return SAND_ID[1];\n    if (isTerrain(bottom)) return SAND_ID[6];\n    if (isTerrain(right)) return SAND_ID[3];\n    if (isTerrain(left)) return SAND_ID[4];\n\n    if (topLeft < waterLevel && top < waterLevel && topRight < waterLevel) {\n      return SAND_ID[6];\n    }\n\n    if (\n      bottomLeft < waterLevel &&\n      bottom < waterLevel &&\n      bottomRight < waterLevel\n    ) {\n      return SAND_ID[1];\n    }\n  };\n\n  const tileType = matrix => (tile, x, y) => {\n    const value = progress(min, max, tile);\n    if (isWater(value)) return sample(WATER_ID);\n    if (isSand(value)) return sandTile(matrix, x, y);\n    // if (value >= 0.6 && value < 0.61) return sample(CASTLE_ID);\n    if (value >= 0.7 && value < 0.8) return sample(FOREST_ID);\n    if (value >= 0.8) return sample(MOUNTAIN_ID);\n    return sample(TERRAIN_ID);\n  };\n\n  const tileTypeFactory = tileType(matrix);\n\n  const normalized = matrix.map((row, y) =>\n    row.map((tile, x) => {\n      // if (y < height * border || y > height * (1 - border)) return WATER_ID;\n      // if (x < width * border || x > width * (1 - border)) return WATER_ID;\n\n      // const value = progress(min, max, tile);\n      // if (value < waterLevel) return WATER_ID;\n\n      return tileTypeFactory(tile, x, y);\n      // const adjcentTiles = findLast(islands, island =>\n      //   findLast(island, isAdjacent(x, y))\n      // );\n      //\n      // if (adjcentTiles) {\n      //   adjcentTiles.push({ x, y, type: tileType(tile) });\n      // } else {\n      //   islands.push([{ x, y, type: tileType(tile) }]);\n      // }\n\n      // return WATER_ID;\n    })\n  );\n\n  const randomTile = () => {\n    const x = Math.floor(Math.random() * width);\n    const y = Math.floor(Math.random() * height);\n    return { x, y };\n  };\n\n  const fitsCastle = ({ x, y }) => {\n    if (y - 1 < 0 || x - 1 < 0) return false;\n\n    const topLeft = normalized[y - 1][x - 1];\n    const topRight = normalized[y - 1][x];\n    const left = normalized[y][x - 1];\n    const right = normalized[y][x];\n\n    const isTerrain = value => includes(TERRAIN_ID, value);\n\n    return (\n      isTerrain(topLeft) &&\n      isTerrain(topRight) &&\n      isTerrain(left) &&\n      isTerrain(right)\n    );\n  };\n\n  const possiblePositions = normalized\n    .flatMap((row, y) => row.map((tile, x) => ({ x, y })))\n    .filter(fitsCastle);\n\n  const distance = (a, b) => Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\n\n  const placeCastle = ({ x, y }) => {\n    normalized[y - 1][x - 1] = CASTLE_ID[0];\n    normalized[y - 1][x] = CASTLE_ID[1];\n    normalized[y][x - 1] = CASTLE_ID[2];\n    normalized[y][x] = CASTLE_ID[3];\n\n    return { x, y };\n  };\n\n  const outsideRadious = (points, point, radious) =>\n    every(points, existingPoint => distance(existingPoint, point) > radious);\n\n  const findCastlePosition = radious => (points, index) => {\n    let point = sample(possiblePositions);\n    let outside = outsideRadious(points, point, radious);\n\n    while (!outside) {\n      point = sample(possiblePositions);\n      outside = outsideRadious(points, point, radious);\n    }\n\n    return [...points, point];\n  };\n\n  const placeCastles = () => {\n    const amount = 20;\n    const exclusionRadious = 20;\n    const r = range(amount)\n      .reduce(findCastlePosition(exclusionRadious), [])\n      .map(placeCastle);\n\n    console.log(r.length);\n    console.log(r);\n\n    return r;\n  };\n\n  placeCastles();\n\n  console.log(`Min: ${min}, Max: ${max}`);\n  console.log(`<0: ${bellow0}, >0: ${above0}`);\n  console.log(`Seed: ${seed}`);\n\n  // console.log(islands.length, islands);\n  // sortBy(islands, \"length\")\n  //   .reverse()[0]\n  //   .forEach(({ x, y, type }) => (normalized[y][x] = type));\n  return normalized;\n};\n\nexport const toEmoji = map =>\n  map.map(row => row.map(column => (column === 0 ? \"🌊\" : \"🌲\")));\n\nexport const toConsole = map =>\n  map.forEach((row, index) => {\n    console.log(`${index}: ${row.join(\"\")}`);\n  });\n","import { Scene as PhaserScene, Cameras, Input } from \"phaser\";\n\nexport default class Scene extends PhaserScene {\n  get controls() {\n    return this.mapControls;\n  }\n\n  set controls(controls) {\n    this.mapControls = controls;\n  }\n\n  get camera() {\n    return this.cameras.main;\n  }\n\n  get keyboard() {\n    return this.input.keyboard;\n  }\n\n  get width() {\n    return this.game.config.width;\n  }\n\n  get height() {\n    return this.game.config.height;\n  }\n\n  get finder() {\n    return this.pathFinder;\n  }\n\n  set finder(finder) {\n    this.pathFinder = finder;\n  }\n\n  get movement() {\n    return this.entityMover;\n  }\n\n  set movement(movement) {\n    this.entityMover = movement;\n  }\n\n  get minimap() {\n    return this.minimapCamera;\n  }\n\n  set minimap(minimap) {\n    this.minimapCamera = minimap;\n  }\n\n  get terrainLayer() {\n    return this.terrain;\n  }\n\n  set terrainLayer(terrainLayer) {\n    this.terrain = terrainLayer;\n  }\n\n  createMapControls() {\n    const { Q, E } = Input.Keyboard.KeyCodes;\n    const { SmoothedKeyControl } = Cameras.Controls;\n    const { left, right, up, down } = this.input.keyboard.createCursorKeys();\n\n    const config = {\n      up: up,\n      down: down,\n      left: left,\n      right: right,\n      camera: this.camera,\n      zoomIn: this.keyboard.addKey(Q),\n      zoomOut: this.keyboard.addKey(E),\n      drag: 0.6,\n      maxSpeed: 200.0,\n      acceleration: 2.8\n    };\n\n    this.controls = new SmoothedKeyControl(config);\n  }\n\n  setupCamera(mapWidth, mapHeight) {\n    const { width, height } = this.camera;\n\n    this.camera.setBounds(0, 0, mapWidth, mapHeight);\n    this.camera.setScroll(\n      -(width / 2) + mapWidth / 2,\n      -(height / 2) + mapHeight / 2\n    );\n  }\n}\n","import names from \"@xaroth8088/random-names/generators/towns_and_cities/fantasyTowns.mjs\";\n\nexport default class Castle {\n  constructor(scene, x, y, tileWidth, tileHeight) {\n    this.scene = scene;\n\n    this.name = names();\n\n    this.positon = {\n      x: x * tileWidth + tileWidth,\n      y: y * tileWidth + tileHeight\n    };\n    this.size = {\n      x: tileWidth * 2 + tileWidth / 2,\n      y: tileHeight * 2 + tileHeight / 2\n    };\n\n    this.trigger = scene.add\n      .zone(this.positon.x, this.positon.y)\n      .setSize(this.size.x, this.size.y);\n\n    scene.physics.world.enable(this.trigger);\n    this.trigger.body.setAllowGravity(false);\n    this.trigger.body.moves = false;\n    this.trigger.setInteractive();\n\n    this.trigger.on(\"pointerover\", () => scene.setOpenCursor());\n    this.trigger.on(\"pointerout\", () => scene.setDefaultCursor());\n    this.trigger.on(\"pointerdown\", () =>\n      scene.events.emit(\"castleclicked\", this)\n    );\n\n    this.armies = {\n      warrior: 2\n    };\n  }\n\n  setOwner = player => {\n    this.owner = player.name;\n  };\n\n  clearOwner = () => {\n    this.owner = null;\n  };\n\n  addArmy = (type, amount) => {\n    const previousAmount = this.armies[type] || 0;\n    this.armies = {\n      ...this.armies,\n      [type]: previousAmount + amount\n    };\n  };\n\n  removeArmy = (type, amount) => {\n    if (!this.armies[type]) return;\n\n    const previousAmount = this.armies[type];\n    this.armies = {\n      ...this.armies,\n      [type]: previousAmount - amount\n    };\n  };\n}\n","import { isEqual } from \"lodash\";\nimport { Geom } from \"phaser\";\n\nconst INITIAL_STATE = {\n  path: [],\n  cost: 0,\n  totalCost: 0,\n  currentTurn: [],\n  nextTurns: [],\n  indicators: [],\n  nextIndicators: []\n};\n\nconst pathReducer = (costMatrix, target) => (state, { x, y }) => {\n  const { cost, totalCost, currentTurn, nextTurns } = state;\n  const tileCost = costMatrix[y][x];\n\n  if (totalCost + tileCost <= target.movementPoints)\n    return {\n      ...state,\n      cost: cost + tileCost,\n      totalCost: totalCost + tileCost,\n      currentTurn: [...currentTurn, { x, y }]\n    };\n\n  return {\n    ...state,\n    totalCost: totalCost + tileCost,\n    nextTurns: [...nextTurns, { x, y }]\n  };\n};\n\nexport default (scene, costMatrix, tileWidth, tileHeight) => {\n  let graphics = scene.add.graphics();\n  let state = INITIAL_STATE;\n\n  const worldX = value => value * tileWidth;\n  const worldY = value => value * tileHeight;\n\n  const clear = () => {\n    graphics.destroy();\n    graphics = scene.add.graphics();\n    state = INITIAL_STATE;\n  };\n\n  const createPathPoint = ({ x, y }) => {\n    const positon = {\n      x: worldX(x) + tileWidth / 2,\n      y: worldY(y) + tileHeight / 2\n    };\n    const circle = new Geom.Circle(positon.x, positon.y, 8);\n    graphics.fillCircleShape(circle);\n    return circle;\n  };\n\n  const onComplete = target => () => {\n    scene.camera.stopFollow(target.body);\n    clear();\n  };\n\n  const doMove = target => {\n    const { cost, currentTurn } = state;\n    const tweens = currentTurn.map(({ x, y }) => ({\n      targets: target.body,\n      x: { value: worldX(x), duration: 200 },\n      y: { value: worldY(y), duration: 200 }\n    }));\n\n    scene.camera.startFollow(target.body);\n    scene.tweens.timeline({ tweens, onComplete: onComplete(target) });\n\n    target.spendMovement(cost);\n  };\n\n  const move = target => path => {\n    if (!path || path.length <= 1) return clear();\n\n    if (state && state.currentTurn.length && isEqual(state.path, path))\n      return doMove(target);\n\n    clear();\n\n    const nextState = path\n      .slice(1, path.length)\n      .reduce(pathReducer(costMatrix, target), { ...INITIAL_STATE, path });\n\n    let { currentTurn, nextTurns } = nextState;\n\n    graphics.fillStyle(0xffffff, 1); // color: white\n    nextState.indicators = currentTurn.map(createPathPoint);\n\n    graphics.fillStyle(0xff0000, 1); // color: red\n    nextState.nextIndicators = nextTurns.map(createPathPoint);\n\n    state = nextState;\n  };\n\n  return { move, clear };\n};\n","export default class Army {\n  constructor(scene, x, y, type) {\n    this.scene = scene;\n    this.movementPoints = 4;\n    this.body = scene.physics.add\n      .sprite(x, y, type)\n      .setDisplaySize(64, 64)\n      .setDisplayOrigin(-16, -10)\n      .setInteractive()\n      .on(\"pointerdown\", () => (scene.target = this));\n\n    this.onCastle = false;\n\n    this.body.on(\"overlapstart\", function() {\n      this.body.debugBodyColor = 0xff3300;\n      this.onCastle = true;\n      alert(\"You're on a castle\");\n    });\n\n    this.body.on(\"overlapend\", function() {\n      this.body.debugBodyColor = 0x00ff33;\n      this.onCastle = false;\n    });\n\n    this.scene.castles.forEach(({ trigger }) => {\n      this.scene.physics.add.overlap(this.body, trigger);\n    });\n  }\n\n  spendMovement = amount => (this.movementPoints -= amount);\n\n  resetMovement = () => (this.movementPoints = 4);\n\n  update = () => {\n    const {\n      body: { body }\n    } = this;\n\n    if (body.embedded) body.touching.none = false;\n\n    const touching = !body.touching.none;\n    const wasTouching = !body.wasTouching.none;\n\n    if (touching && !wasTouching) this.body.emit(\"overlapstart\");\n    else if (!touching && wasTouching) this.body.emit(\"overlapend\");\n  };\n}\n","import Army from \"./Army\";\n\nconst INITIAL_STATE = {\n  turn: 1,\n  name: \"\",\n  money: 0,\n  armies: [],\n  castles: []\n};\n\nconst player = (scene, id) => {\n  let state = {\n    ...INITIAL_STATE,\n    name: `Player ${id}`\n  };\n\n  const endTurn = () => {\n    state.armies.forEach(army => army.resetMovement());\n\n    state = {\n      ...state,\n      turn: state.turn + 1\n    };\n  };\n\n  const addArmy = (x, y, type) => {\n    const newArmy = new Army(scene, x, y, type);\n    state = {\n      ...state,\n      armies: [...state.armies, newArmy]\n    };\n    return newArmy;\n  };\n\n  const name = () => state.name;\n  const turn = () => state.turn;\n  const update = () => state.armies.forEach(army => army.update());\n\n  return {\n    state,\n    name,\n    turn,\n    update,\n    endTurn,\n    addArmy\n  };\n};\n\nexport default player;\n","import { Math as PhaserMath, Scene as PhaserScene } from \"phaser\";\n\nimport generator from \"./TerrainGen\";\nimport Scene from \"./Scene\";\nimport Map from \"./Map\";\nimport Movement from \"./Movement\";\nimport Player from \"./Player\";\n\nconst MAP_WIDTH = 100;\nconst MAP_HEIGHT = 100;\nconst TILE_WIDTH = 128;\nconst TILE_HEIGHT = 128;\n// const SEED = 0.8444330836642344;\n\nconst worldToTile = (x, y) => ({\n  x: Math.floor(x / TILE_WIDTH),\n  y: Math.floor(y / TILE_HEIGHT)\n});\n\nconst tileToWorld = (x, y) => ({\n  x: Math.floor(x * TILE_WIDTH),\n  y: Math.floor(y * TILE_HEIGHT)\n});\n\nconst cursor = name => {\n  return `url(${process.env.PUBLIC_URL}/${name}.png), pointer`;\n};\n\nexport default class GameScene extends Scene {\n  constructor() {\n    super(\"GameScene\");\n    this.players = [];\n  }\n\n  get target() {\n    return this.selectedTarget;\n  }\n\n  set target(selectedTarget) {\n    this.selectedTarget = selectedTarget;\n\n    if (selectedTarget) this.input.setDefaultCursor(cursor(\"cursor_move\"));\n    else this.input.setDefaultCursor(cursor(\"cursor\"));\n  }\n\n  setClickCursor() {\n    this.input.setDefaultCursor(cursor(\"cursor\"));\n  }\n\n  setOpenCursor() {\n    this.input.setDefaultCursor(cursor(\"cursor_open\"));\n  }\n\n  setDefaultCursor() {\n    if (this.target) this.input.setDefaultCursor(cursor(\"cursor_move\"));\n    else this.input.setDefaultCursor(cursor(\"cursor\"));\n  }\n\n  addPlayer() {\n    const playerId = this.players.length;\n    const newPlayer = Player(this, playerId);\n    this.players.push(newPlayer);\n    return newPlayer;\n  }\n\n  preload() {\n    this.load.setBaseURL(`${process.env.PUBLIC_URL}`);\n    this.load.image(\"tileset\", \"tilesets/tileset-extruded.png\");\n    this.load.image(\"warrior\", \"warrior.png\");\n    // this.load.tilemapTiledJSON(\"map\", \"/tilemaps/copycat.json\");\n  }\n\n  create() {\n    this.input.setDefaultCursor(cursor(\"cursor\"));\n    this.input.mouse.disableContextMenu();\n\n    const world = generator(MAP_WIDTH, MAP_HEIGHT);\n    const { map, finder, costMatrix, spawnPoint, terrainLayer } = Map(\n      this,\n      world,\n      MAP_WIDTH,\n      MAP_HEIGHT\n    );\n    this.finder = finder;\n    this.terrainLayer = terrainLayer;\n    const { tileWidth, tileHeight } = map;\n\n    const spawn = tileToWorld(spawnPoint.x - 2, spawnPoint.y + 2);\n\n    const player = this.addPlayer();\n    spawnPoint.castle.setOwner(player);\n    this.target = player.addArmy(spawn.x, spawn.y, \"warrior\");\n\n    this.setupCamera(terrainLayer.width, terrainLayer.height);\n    this.camera.centerOn(spawn.x, spawn.y);\n\n    this.movement = Movement(this, costMatrix, tileWidth, tileHeight);\n\n    this.createMapControls();\n    this.input.on(\"pointerdown\", this.onPointerDown);\n\n    this.scene.run(\"UI\");\n\n    this.events.on(\"castleclicked\", castle => {\n      this.setClickCursor();\n      this.scene.pause();\n      this.scene.run(\"Modal\", { castle, player });\n    });\n  }\n\n  onPointerDown = pointer => {\n    if (pointer.rightButtonDown()) {\n      this.target = null;\n    }\n    if (!this.target) return;\n\n    const { worldX, worldY } = pointer;\n    const to = worldToTile(worldX, worldY);\n    const from = worldToTile(this.target.body.x, this.target.body.y);\n    const onPathCalculated = this.movement.move(this.target);\n\n    try {\n      this.finder.findPath(from.x, from.y, to.x, to.y, onPathCalculated);\n      this.finder.calculate();\n    } catch (error) {\n      console.error(\"Ups! Out of scope :S\");\n    }\n  };\n\n  update(time, delta) {\n    this.controls.update(delta);\n    this.camera.setZoom(PhaserMath.Clamp(this.camera.zoom, 0.08, 1));\n    this.players.forEach(player => player.update());\n  }\n}\n","import EasyStar from \"easystarjs\";\nimport { includes } from \"lodash\";\n\nimport {\n  TERRAIN_ID,\n  FOREST_ID,\n  CASTLE_ID,\n  MOUNTAIN_ID,\n  WATER_ID\n} from \"./TerrainGen\";\nimport Castle from \"./Castle\";\n\nconst setTileCost = (costMatrix, finder) => (tile, x, y, cost) => {\n  finder.setTileCost(tile, cost);\n  costMatrix[y] = costMatrix[y] || [];\n  costMatrix[y][x] = cost;\n};\n\nexport default (scene, world, width, height) => {\n  const map = scene.make.tilemap({ tileWidth: 128, tileHeight: 128 });\n  const { tileWidth, tileHeight } = map;\n  const tileset = map.addTilesetImage(\n    \"tileset\",\n    \"tileset\",\n    tileWidth,\n    tileHeight,\n    1,\n    2\n  );\n\n  let terrainLayer = map.createBlankDynamicLayer(\n    \"terrain\",\n    tileset,\n    0,\n    0,\n    width,\n    height\n  );\n\n  let objectLayer = map.createBlankDynamicLayer(\n    \"object\",\n    tileset,\n    0,\n    0,\n    width,\n    height\n  );\n\n  let spawnPoint;\n\n  const finder = new EasyStar.js();\n  finder.setGrid(world);\n  finder.setAcceptableTiles([...TERRAIN_ID, ...MOUNTAIN_ID, ...FOREST_ID]);\n  finder.enableDiagonals();\n  // finder.enableCornerCutting();\n\n  const costMatrix = [];\n  const setCost = setTileCost(costMatrix, finder);\n  scene.castles = [];\n\n  world.forEach((row, y) =>\n    row.forEach((tile, x) => {\n      if (includes(CASTLE_ID, tile)) {\n        terrainLayer.putTileAt(TERRAIN_ID[0], x, y);\n        objectLayer.putTileAt(tile, x, y);\n        if (tile === CASTLE_ID[0]) {\n          const castle = new Castle(scene, x, y, tileWidth, tileHeight);\n          if (!spawnPoint && includes(CASTLE_ID, tile))\n            spawnPoint = { x, y, castle };\n          scene.castles.push(castle);\n        }\n      } else terrainLayer.putTileAt(tile, x, y);\n\n      if (includes(TERRAIN_ID, tile)) setCost(tile, x, y, 1);\n      if (includes(FOREST_ID, tile)) setCost(tile, x, y, 2);\n      if (includes(MOUNTAIN_ID, tile)) setCost(tile, x, y, 3);\n    })\n  );\n\n  terrainLayer = map.convertLayerToStatic(terrainLayer);\n  objectLayer = map.convertLayerToStatic(objectLayer);\n\n  objectLayer.setTileIndexCallback(24, () => console.log(\"here 24\"), scene);\n  objectLayer.setTileIndexCallback(25, () => console.log(\"here 25\"), scene);\n\n  scene.objectLayer = objectLayer;\n\n  return {\n    map,\n    finder,\n    costMatrix,\n    spawnPoint,\n    terrainLayer\n  };\n};\n","import Phaser, { Game } from \"phaser\";\n\n// import game from \"./Game\";\nimport UI from \"./UI\";\nimport Modal from \"./Modal\";\nimport GameScene from \"./GameScene\";\n\nconst physics = {\n  default: \"arcade\",\n  arcade: {\n    debug: true,\n    gravity: { y: 0 }\n  }\n};\n\nconst config = {\n  physics,\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: \"App\",\n  pixelArt: true,\n  scene: [GameScene, UI, Modal]\n};\n\nnew Game(config);\n","import React from \"react\";\n\nimport \"./App.css\";\n\n// import \"./StaticTileMap\";\nimport \"./Game\";\n\nfunction App() {\n  return <div className=\"App\" id=\"App\"></div>;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
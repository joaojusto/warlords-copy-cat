{"version":3,"sources":["DynamicTileMap.js","TerrainGen.js","App.js","serviceWorker.js","index.js"],"names":["config","scene","create","spawnPoint","map","this","make","tilemap","key","tileWidth","tileHeight","tiles","addTilesetImage","terrainLayer","createBlankDynamicLayer","terrainMatrix","width","height","seed","Math","random","noise","Noise","min","max","bellow0","above0","matrix","range","y","x","value","round","perlin2","Number","EPSILON","lowerBound","maxBound","normalized","row","tile","WATER_ID","sample","FLOWER_ID","TERRAIN_ID","console","log","generator","forEach","putTileAt","convertLayerToStatic","cameras","add","minimapConfig","setZoom","setName","setBackgroundColor","centerOn","player","physics","sprite","setDisplaySize","setDisplayOrigin","main","setBounds","startFollow","finder","EasyStar","js","setGrid","setAcceptableTiles","enableDiagonals","move","path","tweens","slice","length","targets","duration","timeline","input","on","pointer","worldX","worldY","toX","floor","toY","fromX","fromY","findPath","calculate","error","update","time","delta","preload","load","setBaseURL","process","image","tilemapTiledJSON","default","arcade","gravity","type","Phaser","AUTO","parent","pixelArt","Game","App","className","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.750c0e2e.chunk.js","sourcesContent":["import Phaser, { Game } from \"phaser\";\nimport generator from \"./TerrainGen\";\nimport EasyStar from \"easystarjs\";\n\nconst physics = {\n  default: \"arcade\",\n  arcade: {\n    gravity: { y: 0 }\n  }\n};\n\nconst scene = {\n  create,\n  update,\n  preload\n};\n\nconst config = {\n  scene,\n  physics,\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: \"App\",\n  pixelArt: true\n};\n\nconst minimapConfig = {\n  width: 102,\n  height: 102,\n  margin: 10,\n  background: 0x002244,\n  name: \"minimap\"\n};\n\nexport const WATER_ID = 255;\nexport const FLOWER_ID = [8, 32, 56, 80, 104, 128, 152, 176, 200];\nexport const TERRAIN_ID = [190, 127, 126];\nconst MAP_WIDTH = 100;\nconst MAP_HEIGHT = 100;\n// const SEED = 0.8444330836642344;\n\nfunction preload() {\n  this.load.setBaseURL(`${process.env.PUBLIC_URL}`);\n  this.load.image(\"tiles\", \"tilesets/tuxmon-sample-32px-extruded.png\");\n  this.load.image(\"warrior\", \"warrior.png\");\n  this.load.tilemapTiledJSON(\"map\", \"/tilemaps/warlords.json\");\n}\n\nfunction create() {\n  const map = this.make.tilemap({ key: \"map\" });\n  const { tileWidth, tileHeight } = map;\n  const tiles = map.addTilesetImage(\"tuxmon-sample-32px-extruded\", \"tiles\");\n  let terrainLayer = map.createBlankDynamicLayer(\n    \"terrain\",\n    tiles,\n    0,\n    0,\n    MAP_WIDTH,\n    MAP_HEIGHT,\n    tileWidth,\n    tileHeight\n  );\n\n  let spawnPoint;\n  const terrainMatrix = generator(MAP_WIDTH, MAP_HEIGHT);\n  terrainMatrix.forEach((row, y) =>\n    row.forEach((tile, x) => {\n      if (!spawnPoint && tile !== WATER_ID) {\n        spawnPoint = { x, y };\n      }\n      terrainLayer.putTileAt(tile, x, y);\n    })\n  );\n\n  terrainLayer = map.convertLayerToStatic(terrainLayer);\n\n  const { width, height } = terrainLayer;\n\n  this.cameras\n    .add(\n      config.width - minimapConfig.width - minimapConfig.margin,\n      minimapConfig.margin,\n      minimapConfig.width,\n      minimapConfig.height\n    )\n    .setZoom((minimapConfig.height - 2) / height)\n    .setName(minimapConfig.name)\n    .setBackgroundColor(minimapConfig.background)\n    .centerOn(width / 2, height / 2);\n\n  const player = this.physics.add\n    .sprite(spawnPoint.x, spawnPoint.y, \"warrior\")\n    .setDisplaySize(24, 24)\n    .setDisplayOrigin(-2, -4);\n\n  this.cameras.main.setBounds(0, 0, width, height);\n  this.cameras.main.startFollow(player);\n\n  const finder = new EasyStar.js();\n  finder.setGrid(terrainMatrix);\n  finder.setAcceptableTiles([...TERRAIN_ID, ...FLOWER_ID]);\n  finder.enableDiagonals();\n\n  const move = path => {\n    if (!path) return;\n\n    const tweens = path.slice(1, path.length).map(({ x, y }) => ({\n      targets: player,\n      x: { value: x * tileWidth, duration: 200 },\n      y: { value: y * tileHeight, duration: 200 }\n    }));\n\n    this.tweens.timeline({ tweens });\n  };\n\n  this.input.on(\"pointerdown\", function(pointer) {\n    const { worldX, worldY } = pointer;\n    const toX = Math.floor(worldX / tileWidth);\n    const toY = Math.floor(worldY / tileHeight);\n    const fromX = Math.floor(player.x / tileWidth);\n    const fromY = Math.floor(player.y / tileHeight);\n\n    try {\n      finder.findPath(fromX, fromY, toX, toY, move);\n      finder.calculate();\n    } catch (error) {\n      console.log(\"Ups! Out of scope :S\");\n    }\n  });\n}\n\nfunction update(time, delta) {}\n\nnew Game(config);\n","import { Noise } from \"noisejs\";\nimport { range, sample } from \"lodash\";\n\nimport { WATER_ID, TERRAIN_ID, FLOWER_ID } from \"./DynamicTileMap\";\n\nexport default (width, height, seed = Math.random()) => {\n  const noise = new Noise();\n  noise.seed(seed);\n\n  let min = 0;\n  let max = 0;\n  let bellow0 = 0;\n  let above0 = 0;\n\n  const matrix = range(height).map(y => {\n    return range(width).map(x => {\n      const value =\n        Math.round(\n          (noise.perlin2(x / (width / 4), y / (height / 4)) + Number.EPSILON) *\n            100\n        ) / 100;\n      min = value < min ? value : min;\n      max = value > max ? value : max;\n      if (value < 0) bellow0++;\n      else above0++;\n\n      return value;\n    });\n  });\n  const lowerBound = min - min * 0.6;\n  const maxBound = max - max * 0.3;\n  const midBound = max - max * 0.6;\n\n  const normalized = matrix.map(row =>\n    row.map(tile => {\n      if (tile < lowerBound) return WATER_ID;\n      if (tile >= maxBound) return sample(FLOWER_ID);\n      return sample(TERRAIN_ID);\n    })\n  );\n\n  console.log(`Min: ${min}, Max: ${max}`);\n  console.log(`<0: ${bellow0}, >0: ${above0}`);\n  console.log(`Seed: ${seed}`);\n\n  return normalized;\n};\n\nexport const toEmoji = map =>\n  map.map(row => row.map(column => (column === 0 ? \"ðŸŒŠ\" : \"ðŸŒ²\")));\n\nexport const toConsole = map =>\n  map.forEach((row, index) => {\n    console.log(`${index}: ${row.join(\"\")}`);\n  });\n","import React from \"react\";\n\nimport \"./App.css\";\n\n// import \"./StaticTileMap\";\nimport \"./DynamicTileMap\";\n\nfunction App() {\n  return <div className=\"App\" id=\"App\"></div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
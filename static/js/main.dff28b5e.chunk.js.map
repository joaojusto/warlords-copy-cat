{"version":3,"sources":["DynamicTileMap.js","TerrainGen.js","App.js","serviceWorker.js","index.js"],"names":["config","scene","create","spawnPoint","map","this","make","tilemap","key","tileWidth","tileHeight","tiles","addTilesetImage","terrainLayer","createBlankDynamicLayer","terrainMatrix","width","height","seed","Math","random","noise","Noise","min","max","bellow0","above0","matrix","range","y","x","value","round","perlin2","Number","EPSILON","console","log","generator","forEach","row","tile","id","putTileAt","cameras","main","zoom","centerOn","player","physics","add","sprite","setDisplaySize","setDisplayOrigin","finder","EasyStar","js","setGrid","setAcceptableTiles","enableDiagonals","input","on","pointer","worldX","worldY","toX","floor","toY","fromX","fromY","findPath","path","warn","tweens","slice","length","targets","duration","timeline","move","calculate","update","time","delta","preload","load","setBaseURL","process","image","tilemapTiledJSON","default","arcade","gravity","type","Phaser","AUTO","parent","pixelArt","Game","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dff28b5e.chunk.js","sourcesContent":["import Phaser, { Game } from \"phaser\";\nimport generator, { toConsole } from \"./TerrainGen\";\nimport EasyStar from \"easystarjs\";\n\nconst physics = {\n  default: \"arcade\",\n  arcade: {\n    gravity: { y: 0 }\n  }\n};\n\nconst scene = {\n  create,\n  update,\n  preload\n};\n\nconst config = {\n  scene,\n  physics,\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: \"App\",\n  pixelArt: true\n};\n\nconst WATER_ID = 255;\nconst TERRAIN_ID = 199;\nconst MAP_WIDTH = 100;\nconst MAP_HEIGHT = 100;\n\nfunction preload() {\n  this.load.setBaseURL(`${process.env.PUBLIC_URL}`);\n  this.load.image(\"tiles\", \"tilesets/tuxmon-sample-32px-extruded.png\");\n  this.load.image(\"warrior\", \"warrior.png\");\n  this.load.tilemapTiledJSON(\"map\", \"/tilemaps/warlords.json\");\n}\n\nfunction create() {\n  const map = this.make.tilemap({ key: \"map\" });\n  const { tileWidth, tileHeight } = map;\n  const tiles = map.addTilesetImage(\"tuxmon-sample-32px-extruded\", \"tiles\");\n  const terrainLayer = map.createBlankDynamicLayer(\n    \"terrain\",\n    tiles,\n    0,\n    0,\n    MAP_WIDTH,\n    MAP_HEIGHT,\n    tileWidth,\n    tileHeight\n  );\n\n  let spawnPoint;\n  const terrainMatrix = generator(MAP_WIDTH, MAP_HEIGHT);\n  // toConsole(terrainMatrix);\n  terrainMatrix.forEach((row, y) =>\n    row.forEach((tile, x) => {\n      const id = tile === 0 ? WATER_ID : TERRAIN_ID;\n      spawnPoint = !spawnPoint && id !== 0 ? { x, y } : spawnPoint;\n      terrainLayer.putTileAt(id, x, y);\n    })\n  );\n\n  const { width, height } = terrainLayer;\n  this.cameras.main.zoom = this.cameras.main.height / height;\n  this.cameras.main.centerOn(width / 2, height / 2);\n\n  const player = this.physics.add\n    .sprite(spawnPoint.x, spawnPoint.y, \"warrior\")\n    .setDisplaySize(24, 24)\n    .setDisplayOrigin(-2, -4);\n\n  const finder = new EasyStar.js();\n  finder.setGrid(terrainMatrix);\n  finder.setAcceptableTiles([1]);\n  finder.enableDiagonals();\n\n  const move = path => {\n    const tweens = path.slice(1, path.length).map(({ x, y }) => ({\n      targets: player,\n      x: { value: x * tileWidth, duration: 200 },\n      y: { value: y * tileHeight, duration: 200 }\n    }));\n\n    this.tweens.timeline({ tweens });\n  };\n\n  this.input.on(\"pointerdown\", function(pointer) {\n    const { worldX, worldY } = pointer;\n    const toX = Math.floor(worldX / tileWidth);\n    const toY = Math.floor(worldY / tileHeight);\n    const fromX = Math.floor(player.x / tileWidth);\n    const fromY = Math.floor(player.y / tileHeight);\n\n    finder.findPath(fromX, fromY, toX, toY, path => {\n      if (path === null) {\n        console.warn(\"Path was not found.\");\n      } else {\n        console.log(\"Path was found!\", path);\n        move(path);\n      }\n    });\n    finder.calculate();\n  });\n}\n\nfunction update(time, delta) {}\n\nnew Game(config);\n","import { Noise } from \"noisejs\";\nimport { range } from \"lodash\";\n\nexport default (width, height, seed = Math.random()) => {\n  const noise = new Noise();\n  noise.seed(seed);\n\n  let min = 0;\n  let max = 0;\n  let bellow0 = 0;\n  let above0 = 0;\n\n  const matrix = range(height).map(y => {\n    return range(width).map(x => {\n      const value =\n        Math.round((noise.perlin2(x / 10, y / 10) + Number.EPSILON) * 100) /\n        100;\n      min = value < min ? value : min;\n      max = value > max ? value : max;\n      if (value < 0) bellow0++;\n      else above0++;\n\n      if (value > -0.2) return 1;\n      return 0;\n    });\n  });\n\n  console.log(`Min: ${min}, Max: ${max}`);\n  console.log(`<0: ${bellow0}, >0: ${above0}`);\n  console.log(`Seed: ${seed}`);\n\n  return matrix;\n};\n\nexport const toEmoji = map =>\n  map.map(row => row.map(column => (column === 0 ? \"ðŸŒŠ\" : \"ðŸŒ²\")));\n\nexport const toConsole = map =>\n  map.forEach((row, index) => {\n    console.log(`${index}: ${row.join(\"\")}`);\n  });\n","import React from \"react\";\n\nimport \"./App.css\";\n\n// import \"./StaticTileMap\";\nimport \"./DynamicTileMap\";\n\nfunction App() {\n  return <div className=\"App\" id=\"App\"></div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}